generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String               @id @default(uuid())
  email              String               @unique
  username           String
  password           String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  tweets             Tweets[]
  comments           Comments[]
  retweets           Retweets[]
  likes              Likes[]
  followedBy         Follows[]            @relation("followedBy")
  following          Follows[]            @relation("following")
  notifications      Notifications[]
  conversationsUsers ConversationsUsers[]
  messages           Messages[]
  pictures           Pictures[]           @relation("userPictures")

  @@map("users")
}

model Tweets {
  id            String     @id @default(uuid())
  content       String
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  users         Users      @relation(fields: [userId], references: [id])
  userId        String     @map("user_id")
  comment       Comments?  @relation("tweetComment")
  tweetComments Comments[] @relation("commentsOnTweet")
  retweet       Retweets?  @relation("tweetRetweet")
  tweetRetweets Retweets[] @relation("retweetsOnTweet")
  like          Likes[]
  pictures      Pictures[] @relation("tweetPictures")

  @@map("tweets")
}

model Comments {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  users         Users    @relation(fields: [userId], references: [id])
  userId        String   @map("user_id")
  tweet         Tweets   @relation("tweetComment", fields: [tweetId], references: [id])
  tweetId       String   @map("tweet_id")
  parentTweet   Tweets   @relation("commentsOnTweet", fields: [parentTweetId], references: [id])
  parentTweetId String   @map("parent_tweet_id")

  @@unique([tweetId])
  @@map("comments")
}

enum RETWEET_TYPE {
  REPLY
  REPOST
}

model Retweets {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  users         Users        @relation(fields: [userId], references: [id])
  userId        String       @map("user_id")
  tweet         Tweets?      @relation("tweetRetweet", fields: [tweetId], references: [id])
  tweetId       String?      @map("tweet_id")
  parentTweet   Tweets       @relation("retweetsOnTweet", fields: [parentTweetId], references: [id])
  parentTweetId String       @map("parent_tweet_id")
  type          RETWEET_TYPE

  @@unique([tweetId])
  @@map("retweets")
}

model Likes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     Users    @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  tweet     Tweets   @relation(fields: [tweetId], references: [id])
  tweetId   String   @map("tweet_id")

  @@map("likes")
}

model Follows {
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  followedBy   Users    @relation("followedBy", fields: [followedById], references: [id])
  followedById String   @map("followed_by_id")
  following    Users    @relation("following", fields: [followingId], references: [id])
  followingId  String   @map("following_id")

  @@id([followingId, followedById])
  @@map("follows")
}

enum NOTIFICATION_TYPE {
  FOLLOW
  LIKE
  RETWEET
  COMMENT
  MESSAGE
}

model Notifications {
  id        String            @id @default(uuid())
  eventId   String            @map("event_id")
  eventType NOTIFICATION_TYPE
  isRead    Boolean           @map("is_read")
  createdAt DateTime          @default(now()) @map("created_at")
  users     Users             @relation(fields: [userId], references: [id])
  userId    String            @map("user_id")

  @@map("notifications")
}

model Conversations {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now()) @map("created_at")
  conversationsUsers ConversationsUsers[]

  @@map("conversations")
}

model ConversationsUsers {
  id             String        @id @default(uuid())
  users          Users         @relation(fields: [userId], references: [id])
  userId         String        @map("user_id")
  conversation   Conversations @relation(fields: [conversationId], references: [id])
  conversationId String        @map("conversation_id")

  @@map("conversations_users")
}

model Messages {
  id        String     @id @default(uuid())
  message   String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  users     Users      @relation(fields: [userId], references: [id])
  userId    String     @map("user_id")
  pictures  Pictures[] @relation("messagePictures")
  voices    Voices[]   @relation("voicePictures")

  @@map("messages")
}

enum PICTURE_ENTITY {
  USER
  TWEET
  MESSAGE
}

model Pictures {
  id         String         @id @default(uuid())
  path       String
  entityId   String         @map("entity_id")
  entityType PICTURE_ENTITY @map("entity_type")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  user       Users?         @relation("userPictures", fields: [entityId], references: [id], map: "user_picture")
  tweet      Tweets?        @relation("tweetPictures", fields: [entityId], references: [id], map: "tweet_picture")
  message    Messages?      @relation("messagePictures", fields: [entityId], references: [id], map: "message_picture")

  @@map("pictures")
}

enum VOICE_ENTITY {
  MESSAGE
}

model Voices {
  id         String         @id @default(uuid())
  path       String
  entityId   String         @map("entity_id")
  entityType PICTURE_ENTITY @map("entity_type")
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  message    Messages?      @relation("voicePictures", fields: [entityId], references: [id], map: "message_voice")

  @@map("voices")
}
